//  MultbiasCommandThread.java

// $Id$
package ngat.moptop;

import java.lang.*;
import java.text.*;
import java.util.*;

import ngat.moptop.command.*;
import ngat.util.logging.*;

/**
 * Utility class used by BIASImplementation and MULTBIASImplementation, 
 * to send multbias commands to an individual C layer, and monitor their results.
 * @author Chris Mottram
 * @version $Revision$
 */
public class MultbiasCommandThread extends Thread
{
	/**
	 * Revision Control System id string, showing the version of the Class.
	 */
	public final static String RCSID = new String("$Id$");
	/**
	 * A reference to the Moptop object. Used to access logging facilities.
	 * @see Moptop
	 */
	protected Moptop moptop = null;
	/**
	 * A reference to the Moptop status object. Used to access configuration properties.
	 * @see MoptopStatus
	 */
	protected MoptopStatus status = null;
	/**
	 * Which C layer we are interacting with.
	 */
	protected int cLayerIndex;
	/**
	 * How many exposures to do in a Multbias.
	 */
	protected int exposureCount;
	/**
	 * Return value from C layer: how many FITS files were produced.
	 */
	protected int filenameCount;
	/**
	 * Return value from C layer: The multbias number of the FITS files.
	 */
	protected int multbiasNumber;
	/**
	 * Return value from C layer: The last FITS filename produced.
	 */
	protected String lastFilename;
	/**
	 * The exception thrown by the Multbias Command, if an error occurs.
	 */
	protected Exception exception = null;
	
	/**
	 * Used to set the Moptop reference.
	 * @param m The Moptop reference.
	 * @see #moptop
	 */
	public void setMoptop(Moptop m)
	{
		moptop = m;
	}
	
	/**
	 * Used to set the Moptop status object reference.
	 * @param s The Moptop status object reference.
	 * @see #status
	 */
	public void setStatus(MoptopStatus s)
	{
		status = s;
	}
	
	/**
	 * Set the C layer index.
	 * @param i The index to use.
	 * @see #cLayerIndex
	 */
	public void setCLayerIndex(int i)
	{
		cLayerIndex = i;
	}
	
	/**
	 * Set the Multbias command parameters.
	 * @param expCount The number of exposures.
	 * @see #exposureCount
	 */
	public void setMultbiasCommandParameters(int expCount)
	{
		exposureCount = expCount;
	}
	
	/**
	 * The run method. This should be called after setCLayerIndex and setMultbiasCommandParameters have
	 * been called. sendMultbiasCommand is called, and if it throws an exception this is captured and
	 * stored in exception.
	 * @see #sendMultbiasCommand
	 * @see #exception
	 */
	public void run()
	{
		try
		{
			sendMultbiasCommand();
		}
		catch(Exception e)
		{
			exception = e;
		}
	}
	
	/**
	 * Get the last FITS image filename generated by the completed multbias command.
	 * @return A string containing the last FITS image filename generated by the completed multbias command.
	 * @see #lastFilename
	 */
	public String getLastFilename()
	{
		return lastFilename;
	}
	
	/**
	 * Get an exception thrown by the multbias command.
	 * @return The exception thrown as a result of the multbias command, or null if no exception occurred.
	 * @see #exception
	 */
	public Exception getException()
	{
		return exception;
	}
	
	/**
	 * Send the multbias command to the C layer.
	 * @exception Exception Thrown if an error occurs.
	 * @see #cLayerIndex
	 * @see #exposureCount
	 * @see #parseSuccessfulReply
	 * @see ngat.moptop.command.MultbiasCommand
	 * @see ngat.moptop.command.MultbiasCommand#setAddress
	 * @see ngat.moptop.command.MultbiasCommand#setPortNumber
	 * @see ngat.moptop.command.MultbiasCommand#setCommand
	 * @see ngat.moptop.command.MultbiasCommand#sendCommand
	 * @see ngat.moptop.command.MultbiasCommand#getParsedReplyOK
	 * @see ngat.moptop.command.MultbiasCommand#getReturnCode
	 * @see ngat.moptop.command.MultbiasCommand#getParsedReply
	 */
	protected void sendMultbiasCommand() throws Exception
	{
		MultbiasCommand command = null;
		int portNumber,returnCode;
		String hostname = null;
		String errorString = null;
		
		moptop.log(Logging.VERBOSITY_INTERMEDIATE,"sendMultbiasCommand:"+
			   "\n\t:cLayerIndex = "+cLayerIndex+
			   "\n\t:exposureCount = "+exposureCount+".");
		command = new MultbiasCommand();
		// configure C comms
		hostname = status.getProperty("moptop.c.hostname."+cLayerIndex);
		portNumber = status.getPropertyInteger("moptop.c.port_number."+cLayerIndex);
		command.setAddress(hostname);
		command.setPortNumber(portNumber);
		moptop.log(Logging.VERBOSITY_INTERMEDIATE,"sendMultbiasCommand:cLayerIndex = "+cLayerIndex+
			   " :hostname = "+hostname+" :port number = "+portNumber+".");
		command.setCommand(exposureCount);
		// actually send the command to the C layer
		command.sendCommand();
		// check the parsed reply
		if(command.getParsedReplyOK() == false)
		{
			returnCode = command.getReturnCode();
			errorString = command.getParsedReply();
			moptop.log(Logging.VERBOSITY_TERSE,
				   "sendMultrunCommand:multbias command failed with return code "+
				   returnCode+" and error string:"+errorString);
			throw new Exception(this.getClass().getName()+
					    ":sendMultbiasCommand:Command failed with return code "+returnCode+
					    " and error string:"+errorString);
		}
		// extract data from successful reply.
		parseSuccessfulReply(command.getParsedReply());
		moptop.log(Logging.VERBOSITY_INTERMEDIATE,"sendMultbiasCommand:finished.");
	}
	
	/**
	 * Parse the successful reply string from the Multbias command.
	 * Currently should be of the form:
	 * "&lt;filename count&gt; &lt;multdark number&gt; &lt;last FITS filename&gt;".
	 * The preceeding '0' denoting success should have already been stripped off.
	 * @param replyString The reply string.
	 * @exception NumberFormatException Thrown if parsing the filename count or multbias number fails.
	 * @see #filenameCount
	 * @see #multbiasNumber
	 * @see #lastFilename
	 */
	protected void parseSuccessfulReply(String replyString) throws NumberFormatException
	{
		String token = null;
		StringTokenizer st = new StringTokenizer(replyString," ");
		int tokenIndex;
		
		moptop.log(Logging.VERBOSITY_VERBOSE,"parseSuccessfulReply:started.");
		tokenIndex = 0;
		while(st.hasMoreTokens())
		{
			// get next token 
			token = st.nextToken();
			moptop.log(Logging.VERBOSITY_VERY_VERBOSE,"parseSuccessfulReply:token "+
				   tokenIndex+" = "+token+".");
			if(tokenIndex == 0)
			{
				filenameCount = Integer.parseInt(token);
			}
			else if(tokenIndex == 1)
			{
				multbiasNumber = Integer.parseInt(token);
			}
			else if(tokenIndex == 2)
			{
				lastFilename = token;
			}
			else
			{
				moptop.log(Logging.VERBOSITY_VERBOSE,
					   "parseSuccessfulReply:unknown token index "+
					   tokenIndex+" = "+token+".");
			}
			// increment index
			tokenIndex++;
		}
		moptop.log(Logging.VERBOSITY_VERBOSE,"parseSuccessfulReply:finished.");
	}
}
